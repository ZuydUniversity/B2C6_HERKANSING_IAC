"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostUpdateSchema = exports.PostUpdateScalarSchema = exports.PostCreateSchema = exports.PostCreateScalarSchema = exports.PostPrismaUpdateSchema = exports.PostPrismaCreateSchema = exports.PostSchema = exports.PostScalarSchema = void 0;
/* eslint-disable */
const zod_1 = require("zod");
const baseSchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.coerce.date().default(() => new Date()),
    updatedAt: zod_1.z.coerce.date(),
    title: zod_1.z.string().min(1).max(256),
    content: zod_1.z.string(),
    published: zod_1.z.boolean(),
});
const relationSchema = zod_1.z.object({
    author: zod_1.z.record(zod_1.z.unknown()),
});
const fkSchema = zod_1.z.object({
    authorId: zod_1.z.string(),
});
/**
 * `Post` schema excluding foreign keys and relations.
 */
exports.PostScalarSchema = baseSchema;
/**
 * `Post` schema including all fields (scalar, foreign key, and relations) and validations.
 */
exports.PostSchema = exports.PostScalarSchema.merge(fkSchema).merge(relationSchema.partial());
/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
exports.PostPrismaCreateSchema = baseSchema.partial().passthrough();
/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
exports.PostPrismaUpdateSchema = zod_1.z.object({
    id: zod_1.z.string(),
    createdAt: zod_1.z.coerce.date().default(() => new Date()),
    updatedAt: zod_1.z.coerce.date(),
    title: zod_1.z.string().min(1).max(256),
    content: zod_1.z.string(),
    published: zod_1.z.boolean()
}).partial();
/**
 * `Post` schema for create operations excluding foreign keys and relations.
 */
exports.PostCreateScalarSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, published: true
});
/**
 * `Post` schema for create operations including scalar fields, foreign key fields, and validations.
 */
exports.PostCreateSchema = exports.PostCreateScalarSchema.merge(fkSchema);
/**
 * `Post` schema for update operations excluding foreign keys and relations.
 */
exports.PostUpdateScalarSchema = baseSchema.partial();
/**
 * `Post` schema for update operations including scalar fields, foreign key fields, and validations.
 */
exports.PostUpdateSchema = exports.PostUpdateScalarSchema.merge(fkSchema.partial());
