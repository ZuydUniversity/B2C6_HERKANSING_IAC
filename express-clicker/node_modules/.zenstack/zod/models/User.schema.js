"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserUpdateSchema = exports.UserUpdateScalarSchema = exports.UserCreateSchema = exports.UserCreateScalarSchema = exports.UserPrismaUpdateSchema = exports.UserPrismaCreateSchema = exports.UserSchema = exports.UserScalarSchema = void 0;
/* eslint-disable */
const zod_1 = require("zod");
const baseSchema = zod_1.z.object({
    id: zod_1.z.string(),
    email: zod_1.z.string().email().min(6).max(32),
    password: zod_1.z.string(),
});
const relationSchema = zod_1.z.object({
    posts: zod_1.z.array(zod_1.z.unknown()).optional(),
});
/**
 * `User` schema excluding foreign keys and relations.
 */
exports.UserScalarSchema = baseSchema.omit({
    password: true,
});
/**
 * `User` schema including all fields (scalar, foreign key, and relations) and validations.
 */
exports.UserSchema = exports.UserScalarSchema.merge(relationSchema.partial());
/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
exports.UserPrismaCreateSchema = baseSchema.partial().passthrough();
/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
exports.UserPrismaUpdateSchema = zod_1.z.object({
    id: zod_1.z.string(),
    email: zod_1.z.string().email().min(6).max(32),
    password: zod_1.z.string()
}).partial();
/**
 * `User` schema for create operations excluding foreign keys and relations.
 */
exports.UserCreateScalarSchema = baseSchema.partial({
    id: true
});
/**
 * `User` schema for create operations including scalar fields, foreign key fields, and validations.
 */
exports.UserCreateSchema = baseSchema.partial({
    id: true
});
/**
 * `User` schema for update operations excluding foreign keys and relations.
 */
exports.UserUpdateScalarSchema = baseSchema.partial();
/**
 * `User` schema for update operations including scalar fields, foreign key fields, and validations.
 */
exports.UserUpdateSchema = exports.UserUpdateScalarSchema;
