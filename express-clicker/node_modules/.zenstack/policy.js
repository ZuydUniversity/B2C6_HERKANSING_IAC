"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable */
const runtime_1 = require("@zenstackhq/runtime");
const policy = {
    policy: {
        user: {
            modelLevel: {
                read: {
                    guard: User_read,
                },
                create: {
                    guard: User_create,
                },
                update: {
                    guard: User_update,
                },
                postUpdate: {
                    guard: User_postUpdate,
                },
                delete: {
                    guard: User_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
        post: {
            modelLevel: {
                read: {
                    guard: Post_read,
                },
                create: {
                    guard: Post_create,
                },
                update: {
                    guard: Post_update,
                },
                postUpdate: {
                    guard: Post_postUpdate,
                },
                delete: {
                    guard: Post_delete,
                }
            },
            fieldLevel: {
                read: {},
                update: {},
            },
        },
    },
    validation: {
        user: {
            hasValidation: true
        },
        post: {
            hasValidation: true
        },
    },
};
function User_read(context, db) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (user == null) ? { OR: [] } : {
        id: user.id
    };
}
function $check_User_read(input, context) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if ((0, runtime_1.allFieldsEqual)(user, input, ['id'])) {
        return true;
    }
    return false;
}
function User_create(context, db) {
    return { AND: [] };
}
function $check_User_create(input, context) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (true) {
        return true;
    }
    if ((0, runtime_1.allFieldsEqual)(user, input, ['id'])) {
        return true;
    }
    return false;
}
function User_update(context, db) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (user == null) ? { OR: [] } : {
        id: user.id
    };
}
function $check_User_update(input, context) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if ((0, runtime_1.allFieldsEqual)(user, input, ['id'])) {
        return true;
    }
    return false;
}
function User_postUpdate(context, db) {
    return { AND: [] };
}
function $check_User_postUpdate(input, context) {
    return true;
}
function User_delete(context, db) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (user == null) ? { OR: [] } : {
        id: user.id
    };
}
function $check_User_delete(input, context) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if ((0, runtime_1.allFieldsEqual)(user, input, ['id'])) {
        return true;
    }
    return false;
}
function Post_read(context, db) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return { OR: [{
                AND: [(user != null) ? { AND: [] } : { OR: [] }, {
                        published: true
                    }]
            }, (user == null) ? { OR: [] } : {
                author: {
                    is: {
                        id: user.id
                    }
                }
            }] };
}
function $check_Post_read(input, context) {
    var _a, _b, _c, _d;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if (((user != null) && (input === null || input === void 0 ? void 0 : input.published))) {
        return true;
    }
    if ((((_c = (_b = input === null || input === void 0 ? void 0 : input.author) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : null) == ((_d = user === null || user === void 0 ? void 0 : user.id) !== null && _d !== void 0 ? _d : null))) {
        return true;
    }
    return false;
}
function Post_create(context, db) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (user == null) ? { OR: [] } : {
        author: {
            is: {
                id: user.id
            }
        }
    };
}
function $check_Post_create(input, context) {
    var _a, _b, _c, _d;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if ((((_c = (_b = input === null || input === void 0 ? void 0 : input.author) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : null) == ((_d = user === null || user === void 0 ? void 0 : user.id) !== null && _d !== void 0 ? _d : null))) {
        return true;
    }
    return false;
}
function Post_update(context, db) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (user == null) ? { OR: [] } : {
        author: {
            is: {
                id: user.id
            }
        }
    };
}
function $check_Post_update(input, context) {
    var _a, _b, _c, _d;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if ((((_c = (_b = input === null || input === void 0 ? void 0 : input.author) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : null) == ((_d = user === null || user === void 0 ? void 0 : user.id) !== null && _d !== void 0 ? _d : null))) {
        return true;
    }
    return false;
}
function Post_postUpdate(context, db) {
    return { AND: [] };
}
function $check_Post_postUpdate(input, context) {
    return true;
}
function Post_delete(context, db) {
    var _a;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    return (user == null) ? { OR: [] } : {
        author: {
            is: {
                id: user.id
            }
        }
    };
}
function $check_Post_delete(input, context) {
    var _a, _b, _c, _d;
    const user = (_a = context.user) !== null && _a !== void 0 ? _a : null;
    if ((((_c = (_b = input === null || input === void 0 ? void 0 : input.author) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : null) == ((_d = user === null || user === void 0 ? void 0 : user.id) !== null && _d !== void 0 ? _d : null))) {
        return true;
    }
    return false;
}
exports.default = policy;
